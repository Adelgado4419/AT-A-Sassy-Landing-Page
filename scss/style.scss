
@import "config";
@import "btnConfig";
@import "utilities";

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background-color: $light-color;
  font-family: $font-stack;
  line-height: 1;
}

img {
  border-radius: 50%;
}

a {
  text-decoration: none;
}

.hero {
  @include set-bg($primary-color);
  height: 600px;

  nav{
    display:inline-flex;
    align-items:center;
    justify-content: space-between;

    ul{
      display: flex;
    }
    li {
      padding: 15px
    }
    a{
      color: text-color-picker($primary-color)
      // this is linking to the utilites.scss files, it seems that if the lightness of the color is less than 70, it will return the dark color, otherwise, it will retun white. 
    }
    a:hover{
      color: $secondary-color;
    }}
    &-content {
      // the content is refering to the class"hero-content" within the html file. the & refers to the hero tag on line 26. 
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 30px;
  
      img {
        width: 50%;
      }
  
      h1 {
        font-size: 50px;
        line-height: 1.2;
      }
    }
  }
  // This is where the bulk of the SCSS styling needs to be done

  // Take a look at the other files we've built already. How can they be useful here?

  // Also, take time to review the features of SCSS we've already covered:
  // 1. $variables
  // 2. nesting (dont forget about the ampersand (&) parent selector!)
  // 3. At-Rules


// This code is related to some of the aspects of SCSS we have yet to cover.
// While you don't have to mess with it, it would be advisable to attempt to understand its functionality.
$spaceamounts: (1,2,3,4,5);

@each $space in $spaceamounts {
  .m-#{$space} {
    margin: #{$space}rem;
  }
  .my-#{$space} {
    margin: #{$space}rem 0;
  }

  .p-#{$space} {
    padding: #{$space}rem;
  }
  .py-#{$space} {
    padding: #{$space}rem 0;
  }
}
